using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class ProjectileController : MonoBehaviour {
	int power = 8;
	public bool moving = false;
	public List<GameObject> neighbours = new List<GameObject>();
	//public List<GameObject> comboList = new List<GameObject>();
	public int comboLimit;
	public bool toBeDestroyed = false;
	public bool beenChecked = false;
	public bool rooted;
	
	void Start () {
		comboLimit = 3;
		rooted = true;
	}
	//Testing SVN 123123213
	void Update () {
		
		beenChecked = false;
		if(moving){
			transform.Translate(Vector3.forward*power * Time.deltaTime);
		}
		if(!rooted){
			killObject(gameObject);
		}
	}
	public void StartMove(){
		moving = true;
	}
	
	void OnTriggerEnter (Collider other) {		
		if(other.tag == "BigBall"){
			neighbours.Add(other.gameObject);
		}
		
		if(other.tag == "SmallBall" && !other.transform.IsChildOf(transform)){
			GameObject smallBall = other.gameObject;
			GameObject projectile = smallBall.transform.parent.gameObject;
			ProjectileController projectileScript = projectile.GetComponent<ProjectileController>();
			
			Destroy(smallBall);
			projectileScript.moving = false;
			projectileScript.beenChecked = true;
			projectileScript.rooted = true;
			List<GameObject> comboList = projectileScript.CountSameColors();
			if(comboList.Count >= comboLimit){
				foreach(GameObject gobject in comboList)
				{
					killObject(gobject);
				}
			}
		}		
	}
	
	void OnTriggerExit (Collider other) {
		if(other.tag == "BigBall"){
			neighbours.Remove(other.gameObject);                                 // add an item to the end of the List
		}
	}
	void killObject(GameObject victim){
		ProjectileController victimScript = victim.GetComponent<ProjectileController>();
		foreach(GameObject gobject in victimScript.neighbours)
        {
			ProjectileController objectScript = gobject.GetComponent<ProjectileController>();
			objectScript.neighbours.Remove(victim); 
			checkIfRooted(gobject);
		}
		Destroy(victim);
	}
	
	public void checkIfRooted(GameObject gobject){
		ProjectileController objectScript = gobject.GetComponent<ProjectileController>();
		bool isRooted = false;
		foreach(GameObject element in objectScript.neighbours)
        {
			ProjectileController elementScript = element.GetComponent<ProjectileController>();
			if(elementScript.rooted) isRooted = true;
		}
		if(!isRooted && gobject.renderer.material.color != new Color(0.0F, 0.0F, 0.0F, 0.5F)){
			Debug.Log(gobject.renderer.material.color);
			objectScript.rooted = false;
		}
	}
	
	public List<GameObject> CountSameColors(){
		List<GameObject> tempList = new List<GameObject>();
		tempList.Add(gameObject);
		
		foreach(GameObject gobject in neighbours)
        {
            ProjectileController objectScript = gobject.GetComponent<ProjectileController>();
			if(!objectScript.beenChecked && gobject.renderer.material.color == gameObject.renderer.material.color){
				objectScript.beenChecked = true;
				tempList.AddRange(objectScript.CountSameColors());
			}
		}
		return tempList;
	}
}


